#!/usr/bin/env bash
#
# Summary: Set or show the local application-specific Ruby version
#
# Usage: rbenv local <version>
#        rbenv local --unset
#
# Sets the local application-specific Ruby version by writing the
# version name to a file named `.php-version'.
#
# When you run a Ruby command, rbenv will look for a `.php-version'
# file in the current directory and each parent directory. If no such
# file is found in the tree, rbenv will use the global Ruby version
# specified with `rbenv global'. A version specified with the
# `RBENV_VERSION' environment variable takes precedence over local
# and global versions.
#
# For backwards compatibility, rbenv will also read version
# specifications from `.phpenv-version' files, but a `.php-version'
# file in the same directory takes precedence.
#
# <version> should be a string matching a Ruby version known to rbenv.
# The special version string `system' will use your default system Ruby.
# Run `rbenv versions' for a list of available Ruby versions.

set -e
[ -n "$RBENV_DEBUG" ] && set -x

# Provide rbenv completions
if [ "$1" = "--complete" ]; then
  echo --unset
  echo system
  exec rbenv-versions --bare
fi

RBENV_VERSION="$1"

if [ "$RBENV_VERSION" = "--unset" ]; then
  rm -f .php-version .phpenv-version
elif [ -n "$RBENV_VERSION" ]; then
  previous_file="$(RBENV_VERSION= rbenv-version-origin || true)"
  rbenv-version-file-write .php-version "$RBENV_VERSION"
  if [ "$previous_file" -ef .phpenv-version ]; then
    rm -f .phpenv-version
    { echo "rbenv: removed existing \`.phpenv-version' file and migrated"
      echo "       local version specification to \`.php-version' file"
    } >&2
  fi
else
  rbenv-version-file-read .php-version ||
  rbenv-version-file-read .phpenv-version ||
  { echo "rbenv: no local version configured for this directory"
    exit 1
  } >&2
fi
